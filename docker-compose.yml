version: '3'

volumes:
  mongodb:
  postgres:

services:
  #######
  # Proxy
  #######
  traefik:
    image: "traefik:v2.4"
    container_name: "traefik"
    hostname: "traefik"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.yml:/traefik.yml:ro"
  
  ################
  # ICON Streaming
  ################
  etl:
    # Worker that extracts events off the chain and feeds them to kafka
    image: geometrylabs/iconetl:${ICON_ETL_TAG:-latest}
    #environment:
      #ICONETL_KAFKA_SCHEMA_REGISTRY_URL: "http://schemaregistry:8081"
    command: ["stream", "-o", "kafka:9092", "--start-at-head", "true", "--period-seconds", "1"]
    restart: on-failure
  
  registration:
    # REST API to register events with broadcasters
    image: geometrylabs/icon-filter-registration:latest
    hostname: registration
#    ports:
#      - 8008:80
    environment:
      ICON_REGISTRATION_KAFKA_SERVER: kafka:9092
      ICON_REGISTRATION_SCHEMA_SERVER: http://schemaregistry:8081
      ICON_REGISTRATION_POSTGRES_SERVER: ${POSTGRES_HOST:-postgres}
      ICON_REGISTRATION_POSTGRES_USER: admin
      ICON_REGISTRATION_POSTGRES_PASSWORD: changethis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registration-api.rule=PathPrefix(`/api/v1/admin`)"
      - "traefik.port=80"
  
  filter-worker-contract:
    # Worker that filters events and sends them to broadcasters
    image: geometrylabs/icon-kafka-worker:${ICON_KAFKA_WORKER_TAG:-latest}
    hostname: kakfa-worker-contract
    restart: always
    environment:
      CONTRACT_WORKER_KAFKA_SERVER: kafka:9092
      CONTRACT_WORKER_SCHEMA_SERVER: http://schemaregistry:8081
      CONTRACT_WORKER_CONSUMER_GROUP: filter-worker-contract
      CONTRACT_WORKER_POSTGRES_SERVER: postgres
      CONTRACT_WORKER_POSTGRES_USER: admin
      CONTRACT_WORKER_POSTGRES_PASSWORD: changethis
      CONTRACT_WORKER_OUTPUT_TOPIC: outputs
      CONTRACT_WORKER_PROCESSING_MODE: contract

  filter-worker-transaction:
    # Worker that filters events and sends them to broadcasters
    image: geometrylabs/icon-kafka-worker:${ICON_KAFKA_WORKER_TAG:-latest}
    hostname: kakfa-worker-transaction
    restart: always
    environment:
      CONTRACT_WORKER_KAFKA_SERVER: kafka:9092
      CONTRACT_WORKER_SCHEMA_SERVER: http://schemaregistry:8081
      CONTRACT_WORKER_CONSUMER_GROUP: filter-worker-transaction
      CONTRACT_WORKER_POSTGRES_SERVER: postgres
      CONTRACT_WORKER_POSTGRES_USER: admin
      CONTRACT_WORKER_POSTGRES_PASSWORD: changethis
      CONTRACT_WORKER_OUTPUT_TOPIC: outputs
      CONTRACT_WORKER_PROCESSING_MODE: transaction
  
  ###########
  # ICON APIs
  ###########
  rest-api:
    # REST API to serve block data
    image: geometrylabs/icon-rest-api:${ICON_REST_API_TAG:-latest}
#    ports:
#      - "8000:8000"
    depends_on:
      - mongodb
    environment:
      ICON_REST_API_PREFIX: "/api/v1"
      ICON_REST_API_MONGO_HOST: "mongodb:27017"
      ICON_REST_API_MONGO_USERNAME: "mongo"
      ICON_REST_API_MONGO_PASSWORD: "changethis"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rest-api.rule=PathPrefix(`/api/v1`)"
      - "traefik.port=80"
      
  kafka-websocket-server:
    # Websocket endpoints that stream all block, transaction, and event log

    image: geometrylabs/kafka-websocket-server:${KAFKA_WEBSOCKET_SERVER_TAG:-latest}
    expose:
      - 3000
    depends_on:
      - kafka
    environment:
      KAFKA_WEBSOCKET_SERVER_TOPICS: "blocks,transactions,logs"
      KAFKA_WEBSOCKET_SERVER_BROKER_URL: "kafka:9092"
      KAFKA_WEBSOCKET_SERVER_PORT: 3000
      KAFKA_WEBSOCKET_SERVER_PREFIX: "/ws"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kafka-websocket.rule=PathPrefix(`/ws`)"
      - "traefik.webservice.frontend.entryPoints=http,ws"
      - "traefik.port=3000"
      # If enabling https - replace with above
#      - "traefik.webservice.frontend.entryPoints=http,https,ws,wss"

  icon-registration-websocket-server:
  # Websocket endpoints for creating and getting event registrations
    image: geometrylabs/icon-registration-websocket-server:latest
    expose:
      - 3001
#    ports:
#      - "3001:3001"
    depends_on:
      - kafka
      - registration
    environment:
      ICON_REGISTRATION_WEBSOCKET_REGISTRATION_URL: "registration/api/v1/admin"
      ICON_REGISTRATION_WEBSOCKET_BROKER_URL: "kafka:9092"
      ICON_REGISTRATION_WEBSOCKET_OUTPUT_TOPIC: "outputs"
      ICON_REGISTRATION_WEBSOCKET_PORT: "3001"
      ICON_REGISTRATION_WEBSOCKET_PREFIX: ""
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registration-websocket.rule=PathPrefix(`/ws/admin`)"
      - "traefik.webservice.frontend.entryPoints=http,ws"
      - "traefik.port=3001"
      # If enababling https - replace with above
  #      - "traefik.webservice.frontend.entryPoints=http,https,ws,wss"

  ###########
  # Databases
  ###########
  postgres:
    image: postgres:latest
    hostname: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "changethis"

  mongodb:
    image: mongo
    ports: #TODO
      - "27017:27017"
    volumes:
      - mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: "mongo"
      MONGO_INITDB_ROOT_PASSWORD: "changethis"
  
  
  #######
  # Kafka
  #######
  zookeeper:
    # Zookeeper for kafka
    image: confluentinc/cp-zookeeper:${CP_ZOOKEEPER_TAG:-latest}
#    ports: #TODO
#      - "2181:2181"
    environment:
      zk_id: "1"
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    # Kafka
    image: confluentinc/cp-enterprise-kafka:${CP_ENTERPRISE_KAFKA_TAG:-latest}
    hostname: kafka
    depends_on:
      - zookeeper
#    ports: #TODO
#      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_BROKER_RACK: "r1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_JMX_PORT: 9991
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'

  schemaregistry:
    # Kafka schema registry - used to store schemas for kafka connect
    image: confluentinc/cp-schema-registry:${CP_SCHEMA_REGISTRY_TAG:-latest}
    hostname: schemaregistry
    container_name: schemaregistry
    depends_on:
      - zookeeper
      - kafka
#    ports: #TODO
#      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"

  connect:
    # Kafka connect - used to tail data from topics into databases
    image: confluentinc/cp-kafka-connect:${CP_KAFKA_CONNECT_TAG:-5.5.3}
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - kafka
      - schemaregistry
#    ports: #TODO
#      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
    volumes:
      - ./connect/jars:/etc/kafka-connect/jars


  rest-proxy:
    # Kafka REST Proxy to manage kafka
    image: confluentinc/cp-kafka-rest:${CP_KAFKA_REST_TAG:-latest}
    hostname: rest-proxy
    depends_on:
      - kafka
      - schemaregistry
#    ports: #TODO
#      - "8084:8084"
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:9092'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8084'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      KAFKA_REST_HOST_NAME: 'rest-proxy'


  kafka-topic-init:
    # Initialization container for kafka topics
    image: geometrylabs/kafka-topics-init:${KAFKA_TOPIC_INIT_TAG:-latest}
    depends_on:
      - kafka
      - schemaregistry
    volumes:
      - ./kafka/topics/:/topics/
    restart: on-failure
    environment:
      KAFKA_URL: 'kafka:9092'
      KAFKA_SCHEMA_REGISTRY_URL: 'schemaregistry:8081'
      KAFKA_TOPIC_INIT_TOPICS_PATH: '/topics/topics.json'


  kafka-connect-init:
    # Initialization container for schema registry topics
    image: geometrylabs/kafka-connect-init:${KAFKA_CONNECT_INIT_TAG:-latest}
    depends_on:
      - connect
    volumes:
      - ./kafka/connect/:/connectors/
    restart: on-failure
    environment:
      KAFKA_CONNECT_URL: "connect:8083"
      KAFKA_CONNECT_INIT_TIMEOUT: "120"
      KAFKA_CONNECT_INIT_CONNECTORS_PATH: "/connectors/"
